{"version":3,"sources":["components/NavBar.js","services/weather.js","components/SearchBar.js","components/Home.js","components/Favorites.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","pickCity","className","to","apiKey","apiHost","getAutoComplete","searchQuery","a","fetch","response","ok","json","alert","get5DaysForecast","key","getCurrentTemp","SearchBar","suggestionElements","useState","query","setQuery","suggestions","setSuggestions","search","finalSearchQuery","replace","result","length","Key","LocalizedName","map","name","suggestion","href","onClick","e","preventDefault","placeholder","value","onChange","event","target","Home","currentTemp","currentDate","fiveDays","favorites","cityKey","toggleFavorites","useEffect","cityName","addOrRem","find","fav","city","alt","details","src","icon","temperature","style","textAlign","date","toString","weather","Favorites","currentTemps","setCurrentTemps","error","setError","getCurrentTemps","temps","Temperature","Metric","Value","Unit","push","WeatherText","width","App","Date","setFiveDays","setCurrentTemp","current","String","WeatherIcon","padStart","formatter","Intl","DateTimeFormat","weekday","timeZone","fiveDaysData","DailyForecasts","day","Math","floor","Minimum","Maximum","format","EpochDate","setFavorites","exact","path","favIndex","findIndex","temp","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e573c3f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function NavBar({ pickCity }) {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-light bg-dark rounded-bottom\">\r\n        <Link to=\"/\">\r\n          <button className=\"btn btn-primary\">Home</button>\r\n        </Link>\r\n        <Link to=\"/favorites\">\r\n          <button className=\"btn btn-primary\">Favorites</button>\r\n        </Link>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","\r\n\r\nconst apiKey = \"bAi958lyF2zSL1IevwWt6JHXKumB0AMl\";\r\nconst apiHost = \"https://dataservice.accuweather.com\";\r\n\r\nexport async function getAutoComplete(searchQuery) {\r\n    const response = await fetch(\r\n      `${apiHost}/locations/v1/cities/autocomplete?q=${searchQuery}&apikey=${apiKey}`\r\n    );\r\n    if (response.ok) {\r\n      const json = await response.json();\r\n      return json;\r\n    }\r\n\r\n    alert(\"Could not load data from AccuWeather\");\r\n    return [];\r\n  }\r\n\r\n  export async function get5DaysForecast(key) {\r\n    const response = await fetch(\r\n      `${apiHost}/forecasts/v1/daily/5day/${key}?metric=true&apikey=${apiKey}`\r\n    );\r\n    if (response.ok) {\r\n      const json = await response.json();\r\n      return json;\r\n    }\r\n\r\n    alert(\"Could not load data from AccuWeather\");\r\n    return null;\r\n  }\r\n\r\n  export async function getCurrentTemp(key) {\r\n    const response = await fetch(\r\n      `${apiHost}/currentconditions/v1/${key}?apikey=${apiKey}`\r\n    );\r\n    if (response.ok) {\r\n      const json = await response.json();\r\n      return json[0];\r\n    }\r\n\r\n    alert(\"Could not load data from AccuWeather\");\r\n    return null;\r\n  }\r\n\r\n  \r\n","import React, { useState } from \"react\";\r\nimport { getAutoComplete } from \"../services/weather\";\r\n\r\nexport default function SearchBar({ pickCity, apiKey, apiHost }) {\r\n  const [query, setQuery] = useState(\"Tel Aviv\");\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  const search = async searchQuery => {\r\n    const finalSearchQuery = searchQuery.replace(/[^a-zA-Z ]/g, \"\");\r\n    if (finalSearchQuery === query) {\r\n      return;\r\n    }\r\n    setQuery(finalSearchQuery);\r\n    if (!finalSearchQuery) {\r\n      return;\r\n    }\r\n    const result = await getAutoComplete(finalSearchQuery);\r\n    if (result.length === 1) {\r\n      setSuggestions([]);\r\n      pickCity(result[0].Key, result[0].LocalizedName);\r\n    } else {\r\n      setSuggestions(\r\n        result.map(result => {\r\n          return { key: result.Key, name: result.LocalizedName };\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSearch = event => {\r\n    search(event.target.value);\r\n  };\r\n\r\n  let suggestionElements;\r\n  if (suggestions.length) {\r\n    suggestionElements = <div className=\"border border-dark rounded\">{suggestions.map(suggestion => (\r\n      <div key={suggestion.key}>\r\n        <a href=\"#\"\r\n          onClick={e => {\r\n            e.preventDefault();\r\n            setSuggestions([]);\r\n            pickCity(suggestion.key, suggestion.name);\r\n          }}\r\n        >\r\n          {suggestion.name}\r\n        </a>\r\n      </div>\r\n        ))}</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input placeholder=\"search..\" value={query} onChange={handleSearch} />\r\n        {suggestionElements}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\nexport default function Home({\r\n  pickCity,\r\n  currentDate,\r\n  currentTemp,\r\n  fiveDays,\r\n  cityKey,\r\n  favorites,\r\n  toggleFavorites\r\n}) {\r\n  useEffect(() => {\r\n    pickCity(currentTemp.key, currentTemp.cityName);\r\n  }, []);\r\n\r\n  let addOrRem = \"add to favorites\";\r\n  if (favorites.find(fav => fav.city === currentTemp.cityName)) {\r\n    addOrRem = \"remove from favorites\";\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"pt-4 d-flex justify-content-center\">\r\n        <SearchBar pickCity={pickCity} />\r\n      </div>\r\n      <p></p>\r\n      <div className=\"border border-info p-1 rounded\">\r\n        <div>\r\n          <h3>\r\n            <img alt={currentTemp.details} src={currentTemp.icon} /> {currentTemp.cityName}\r\n            <button\r\n              onClick={() => {\r\n                toggleFavorites(currentTemp);\r\n              }}\r\n              className=\"btn btn-success add-to-favorites\"\r\n            >\r\n              {addOrRem}\r\n            </button>\r\n          </h3>{\" \"}\r\n        </div>\r\n        <div>\r\n          <h6> {currentTemp.temperature}</h6>\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <div className=\"d-flex justify-content-center\">\r\n          <h1>{currentTemp.details}</h1>\r\n        </div>\r\n\r\n        <div className=\"row d-flex justify-content-center mt-5 weather-home-dates\">\r\n          <ul\r\n            className=\"list-group list-group-horizontal-md col-md col-3 ml-3 d-flex justify-content-center \"\r\n            style={{ textAlign: \"center\" }}\r\n          >\r\n            {[\r\n              fiveDays.map(e => {\r\n                return (\r\n                  <div key={e.date.toString()}>\r\n                    <div className=\"card bg-primary mt-4 ml-3\">\r\n                      <h5 className=\"card-header\">{e.date.toString()}</h5>\r\n                      <div className=\"card-body \">\r\n                        <h4 className=\"card-title\">{e.weather}°</h4>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })\r\n            ]}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getCurrentTemp } from \"../services/weather\";\r\n\r\nexport default function Favorites({ favorites, pickCity }) {\r\n  const [currentTemps, setCurrentTemps] = useState([]);\r\n  const [error, setError] = useState(false);\r\n\r\n  const getCurrentTemps = async () => {\r\n    const temps = [];\r\n    for (let city of favorites) {\r\n      const currentTemp = await getCurrentTemp(city.key);\r\n      if (!currentTemp) {\r\n        setError(true);\r\n        continue;\r\n      }\r\n      const temperature =\r\n        currentTemp.Temperature.Metric.Value +\r\n        \"°\" +\r\n        currentTemp.Temperature.Metric.Unit;\r\n      temps.push({ ...city, temperature, details: currentTemp.WeatherText });\r\n    }\r\n    setCurrentTemps(temps);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCurrentTemps();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {error &&\r\n        \"Could not load weather data, please refresh and try again later\"}\r\n      <ul className=\"list-group list-group-horizontal-md col-md col-3 ml-3 d-flex justify-content-center mt-5\">\r\n        {currentTemps.map(fav => {\r\n          return (\r\n            <Link to=\"/\" className=\"regular-text\">\r\n              <div>\r\n                <div\r\n                  className=\"card bg-success ml-3 \"\r\n                  style={{ width: \"190px\" }}\r\n                  onClick={() => pickCity(fav.key, fav.city)}\r\n                >\r\n                  <h5 className=\"card-header\">{fav.city}</h5>\r\n                  <div className=\"card-body \">\r\n                    <h4 className=\"card-title\"> {fav.temperature}</h4>\r\n                    <h5 className=\"card-text\">{fav.details} </h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Home from \"./components/Home\";\r\nimport Favorites from \"./components/Favorites\";\r\nimport { get5DaysForecast, getCurrentTemp } from \"./services/weather\";\r\n\r\nfunction App() {\r\n  let currentDate = new Date();\r\n  const [fiveDays, setFiveDays] = useState([]);\r\n  const [currentTemp, setCurrentTemp] = useState({\r\n    key: 215854,\r\n    cityName: \"Tel Aviv\",\r\n    details: \"\",\r\n    temperature: \"\"\r\n  });\r\n  const [error, setError] = useState(false);\r\n\r\n  const pickCity = async (key, cityName) => {\r\n    const current = await getCurrentTemp(key);\r\n    if (!current) {\r\n      setError(true);\r\n    }\r\n    setCurrentTemp({\r\n      key,\r\n      cityName,\r\n      details: current.WeatherText,\r\n      icon: `https://developer.accuweather.com/sites/default/files/${String(\r\n        current.WeatherIcon\r\n      ).padStart(2, \"0\")}-s.png`,\r\n      temperature:\r\n        current.Temperature.Metric.Value + \"°\" + current.Temperature.Metric.Unit\r\n    });\r\n\r\n    const result = await get5DaysForecast(key);\r\n    const formatter = new Intl.DateTimeFormat(\"en-US\", {\r\n      weekday: \"short\",\r\n      timeZone: \"UTC\"\r\n    });\r\n    const fiveDaysData = result.DailyForecasts.map(day => {\r\n      const weather = Math.floor(\r\n        (day.Temperature.Minimum.Value + day.Temperature.Maximum.Value) / 2\r\n      );\r\n\r\n      const dayName = formatter.format(new Date(day.EpochDate * 1000));\r\n      return { weather, date: dayName };\r\n    });\r\n    setFiveDays(fiveDaysData);\r\n  };\r\n\r\n  const [favorites, setFavorites] = useState([]);\r\n\r\n  const toggleFavorites = ({ cityName, key }) => {\r\n    let favIndex = favorites.findIndex(\r\n      fav => fav.city === currentTemp.cityName\r\n    );\r\n    if (favIndex !== -1) {\r\n      let temp = [...favorites];\r\n      temp.splice(favIndex, 1);\r\n      setFavorites([...temp]);\r\n      return;\r\n    }\r\n    setFavorites([...favorites, { city: cityName, key: key }]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-md fluid \">\r\n      {error &&\r\n        \"Could not load weather data, please refresh and try again later\"}\r\n      <Router>\r\n        <NavBar />\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <div className=\"justify-center\">\r\n              <Home\r\n                fiveDays={fiveDays}\r\n                currentTemp={currentTemp}\r\n                currentDate={currentDate}\r\n                pickCity={pickCity}\r\n                setFavorites={setFavorites}\r\n                favorites={favorites}\r\n                toggleFavorites={toggleFavorites}\r\n              />\r\n            </div>\r\n          </Route>\r\n          <Route exact path=\"/favorites\">\r\n            <Favorites favorites={favorites} pickCity={pickCity} />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}