{"version":3,"sources":["components/NavBar.js","services/weather.js","components/SearchBar.js","components/Home.js","components/Favorites.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","pickCity","className","to","apiKey","apiHost","getAutoComplete","searchQuery","a","fetch","response","ok","json","alert","get5DaysForecast","key","getCurrentTemp","SearchBar","suggestionElements","useState","query","setQuery","suggestions","setSuggestions","search","finalSearchQuery","replace","result","length","Key","LocalizedName","map","name","suggestion","href","onClick","e","preventDefault","placeholder","value","onChange","event","target","Home","currentTemp","currentDate","fiveDays","favorites","cityKey","toggleFavorites","useEffect","cityName","addOrRem","find","fav","city","alt","details","src","icon","temperature","style","textAlign","date","toString","weather","Favorites","currentTemps","setCurrentTemps","error","setError","getCurrentTemps","temps","Temperature","Metric","Value","Unit","push","WeatherText","width","App","Date","setFiveDays","setCurrentTemp","current","String","WeatherIcon","padStart","formatter","Intl","DateTimeFormat","weekday","timeZone","fiveDaysData","DailyForecasts","day","Math","floor","Minimum","Maximum","format","EpochDate","setFavorites","exact","path","favIndex","findIndex","temp","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5267e5c6.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport default function NavBar({ pickCity }) {\n  return (\n    <div>\n      <nav className=\"navbar navbar-light bg-dark rounded-bottom\">\n        <Link to=\"/\">\n          <button className=\"btn btn-primary\">Home</button>\n        </Link>\n        <Link to=\"/favorites\">\n          <button className=\"btn btn-primary\">Favorites</button>\n        </Link>\n      </nav>\n    </div>\n  );\n}\n","\n\nconst apiKey = \"bAi958lyF2zSL1IevwWt6JHXKumB0AMl\";\nconst apiHost = \"https://dataservice.accuweather.com\";\n\nexport async function getAutoComplete(searchQuery) {\n    const response = await fetch(\n      `${apiHost}/locations/v1/cities/autocomplete?q=${searchQuery}&apikey=${apiKey}`\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n\n    alert(\"Could not load data from AccuWeather\");\n    return [];\n  }\n\n  export async function get5DaysForecast(key) {\n    const response = await fetch(\n      `${apiHost}/forecasts/v1/daily/5day/${key}?metric=true&apikey=${apiKey}`\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n\n    alert(\"Could not load data from AccuWeather\");\n    return null;\n  }\n\n  export async function getCurrentTemp(key) {\n    const response = await fetch(\n      `${apiHost}/currentconditions/v1/${key}?apikey=${apiKey}`\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return json[0];\n    }\n\n    alert(\"Could not load data from AccuWeather\");\n    return null;\n  }\n\n  \n","import React, { useState } from \"react\";\nimport { getAutoComplete } from \"../services/weather\";\n\nexport default function SearchBar({ pickCity, apiKey, apiHost }) {\n  const [query, setQuery] = useState(\"Tel Aviv\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const search = async searchQuery => {\n    const finalSearchQuery = searchQuery.replace(/[^a-zA-Z ]/g, \"\");\n    if (finalSearchQuery === query) {\n      return;\n    }\n    setQuery(finalSearchQuery);\n    if (!finalSearchQuery) {\n      return;\n    }\n    const result = await getAutoComplete(finalSearchQuery);\n    if (result.length === 1) {\n      setSuggestions([]);\n      pickCity(result[0].Key, result[0].LocalizedName);\n    } else {\n      setSuggestions(\n        result.map(result => {\n          return { key: result.Key, name: result.LocalizedName };\n        })\n      );\n    }\n  };\n\n  const handleSearch = event => {\n    search(event.target.value);\n  };\n\n  let suggestionElements;\n  if (suggestions.length) {\n    suggestionElements = <div className=\"border border-dark rounded\">{suggestions.map(suggestion => (\n      <div key={suggestion.key}>\n        <a href=\"#\"\n          onClick={e => {\n            e.preventDefault();\n            setSuggestions([]);\n            pickCity(suggestion.key, suggestion.name);\n          }}\n        >\n          {suggestion.name}\n        </a>\n      </div>\n        ))}</div>;\n  }\n  return (\n    <div>\n      <div>\n        <input placeholder=\"search..\" value={query} onChange={handleSearch} />\n        {suggestionElements}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport SearchBar from \"./SearchBar\";\n\nexport default function Home({\n  pickCity,\n  currentDate,\n  currentTemp,\n  fiveDays,\n  cityKey,\n  favorites,\n  toggleFavorites\n}) {\n  useEffect(() => {\n    pickCity(currentTemp.key, currentTemp.cityName);\n  }, []);\n\n  let addOrRem = \"add to favorites\";\n  if (favorites.find(fav => fav.city === currentTemp.cityName)) {\n    addOrRem = \"remove from favorites\";\n  }\n\n\n  return (\n    <div>\n      <div className=\"pt-4 d-flex justify-content-center\">\n        <SearchBar pickCity={pickCity} />\n      </div>\n      <p></p>\n      <div className=\"border border-info p-1 rounded\">\n        <div>\n          <h3>\n            <img alt={currentTemp.details} src={currentTemp.icon} /> {currentTemp.cityName}\n            <button\n              onClick={() => {\n                toggleFavorites(currentTemp);\n              }}\n              className=\"btn btn-success add-to-favorites\"\n            >\n              {addOrRem}\n            </button>\n          </h3>{\" \"}\n        </div>\n        <div>\n          <h6> {currentTemp.temperature}</h6>\n          <br />\n        </div>\n        <br />\n        <div className=\"d-flex justify-content-center\">\n          <h1>{currentTemp.details}</h1>\n        </div>\n\n        <div className=\"row d-flex justify-content-center mt-5 weather-home-dates\">\n          <ul\n            className=\"list-group list-group-horizontal-md col-md col-3 ml-3 d-flex justify-content-center \"\n            style={{ textAlign: \"center\" }}\n          >\n            {[\n              fiveDays.map(e => {\n                return (\n                  <div key={e.date.toString()}>\n                    <div className=\"card bg-primary mt-4 ml-3\">\n                      <h5 className=\"card-header\">{e.date.toString()}</h5>\n                      <div className=\"card-body \">\n                        <h4 className=\"card-title\">{e.weather}°</h4>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            ]}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getCurrentTemp } from \"../services/weather\";\n\nexport default function Favorites({ favorites, pickCity }) {\n  const [currentTemps, setCurrentTemps] = useState([]);\n  const [error, setError] = useState(false);\n\n  const getCurrentTemps = async () => {\n    const temps = [];\n    for (let city of favorites) {\n      const currentTemp = await getCurrentTemp(city.key);\n      if (!currentTemp) {\n        setError(true);\n        continue;\n      }\n      const temperature =\n        currentTemp.Temperature.Metric.Value +\n        \"°\" +\n        currentTemp.Temperature.Metric.Unit;\n      temps.push({ ...city, temperature, details: currentTemp.WeatherText });\n    }\n    setCurrentTemps(temps);\n  };\n\n  useEffect(() => {\n    getCurrentTemps();\n  }, []);\n\n  return (\n    <div>\n      {error &&\n        \"Could not load weather data, please refresh and try again later\"}\n      <ul className=\"list-group list-group-horizontal-md col-md col-3 ml-3 d-flex justify-content-center mt-5\">\n        {currentTemps.map(fav => {\n          return (\n            <Link to=\"/\" className=\"regular-text\">\n              <div>\n                <div\n                  className=\"card bg-success ml-3 \"\n                  style={{ width: \"190px\" }}\n                  onClick={() => pickCity(fav.key, fav.city)}\n                >\n                  <h5 className=\"card-header\">{fav.city}</h5>\n                  <div className=\"card-body \">\n                    <h4 className=\"card-title\"> {fav.temperature}</h4>\n                    <h5 className=\"card-text\">{fav.details} </h5>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport Home from \"./components/Home\";\nimport Favorites from \"./components/Favorites\";\nimport { get5DaysForecast, getCurrentTemp } from \"./services/weather\";\n\nfunction App() {\n  let currentDate = new Date();\n  const [fiveDays, setFiveDays] = useState([]);\n  const [currentTemp, setCurrentTemp] = useState({\n    key: 215854,\n    cityName: \"Tel Aviv\",\n    details: \"\",\n    temperature: \"\"\n  });\n  const [error, setError] = useState(false);\n\n  const pickCity = async (key, cityName) => {\n    const current = await getCurrentTemp(key);\n    if (!current) {\n      setError(true);\n    }\n    setCurrentTemp({\n      key,\n      cityName,\n      details: current.WeatherText,\n      icon: `https://developer.accuweather.com/sites/default/files/${String(\n        current.WeatherIcon\n      ).padStart(2, \"0\")}-s.png`,\n      temperature:\n        current.Temperature.Metric.Value + \"°\" + current.Temperature.Metric.Unit\n    });\n\n    const result = await get5DaysForecast(key);\n    const formatter = new Intl.DateTimeFormat(\"en-US\", {\n      weekday: \"short\",\n      timeZone: \"UTC\"\n    });\n    const fiveDaysData = result.DailyForecasts.map(day => {\n      const weather = Math.floor(\n        (day.Temperature.Minimum.Value + day.Temperature.Maximum.Value) / 2\n      );\n\n      const dayName = formatter.format(new Date(day.EpochDate * 1000));\n      return { weather, date: dayName };\n    });\n    setFiveDays(fiveDaysData);\n  };\n\n  const [favorites, setFavorites] = useState([]);\n\n  const toggleFavorites = ({ cityName, key }) => {\n    let favIndex = favorites.findIndex(\n      fav => fav.city === currentTemp.cityName\n    );\n    if (favIndex !== -1) {\n      let temp = [...favorites];\n      temp.splice(favIndex, 1);\n      setFavorites([...temp]);\n      return;\n    }\n    setFavorites([...favorites, { city: cityName, key: key }]);\n  };\n\n  return (\n    <div className=\"container-md fluid \">\n      {error &&\n        \"Could not load weather data, please refresh and try again later\"}\n      <Router>\n        <NavBar />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <div className=\"justify-center\">\n              <Home\n                fiveDays={fiveDays}\n                currentTemp={currentTemp}\n                currentDate={currentDate}\n                pickCity={pickCity}\n                setFavorites={setFavorites}\n                favorites={favorites}\n                toggleFavorites={toggleFavorites}\n              />\n            </div>\n          </Route>\n          <Route exact path=\"/favorites\">\n            <Favorites favorites={favorites} pickCity={pickCity} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}